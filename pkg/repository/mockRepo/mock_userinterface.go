// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/user.go

// Package mockUser is a generated GoMock package.
package mockUser

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	helper "main.go/pkg/common/helper"
	response "main.go/pkg/common/response"
	domain "main.go/pkg/domain"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserRepository) AddAddress(id int, address helper.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", id, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserRepositoryMockRecorder) AddAddress(id, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserRepository)(nil).AddAddress), id, address)
}

// CreateWallet mocks base method.
func (m *MockUserRepository) CreateWallet(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockUserRepositoryMockRecorder) CreateWallet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockUserRepository)(nil).CreateWallet), id)
}

// EditProfile mocks base method.
func (m *MockUserRepository) EditProfile(userID int, updatingDetails helper.Userprofile) (response.Userprofile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", userID, updatingDetails)
	ret0, _ := ret[0].(response.Userprofile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditProfile indicates an expected call of EditProfile.
func (mr *MockUserRepositoryMockRecorder) EditProfile(userID, updatingDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockUserRepository)(nil).EditProfile), userID, updatingDetails)
}

// FindPassword mocks base method.
func (m *MockUserRepository) FindPassword(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPassword", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPassword indicates an expected call of FindPassword.
func (mr *MockUserRepositoryMockRecorder) FindPassword(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPassword", reflect.TypeOf((*MockUserRepository)(nil).FindPassword), id)
}

// ForgotPassword mocks base method.
func (m *MockUserRepository) ForgotPassword(email string) (response.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", email)
	ret0, _ := ret[0].(response.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockUserRepositoryMockRecorder) ForgotPassword(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockUserRepository)(nil).ForgotPassword), email)
}

// ListAllAddresses mocks base method.
func (m *MockUserRepository) ListAllAddresses(userId int) ([]response.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllAddresses", userId)
	ret0, _ := ret[0].([]response.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllAddresses indicates an expected call of ListAllAddresses.
func (mr *MockUserRepositoryMockRecorder) ListAllAddresses(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllAddresses", reflect.TypeOf((*MockUserRepository)(nil).ListAllAddresses), userId)
}

// UpdateAddress mocks base method.
func (m *MockUserRepository) UpdateAddress(userID, addressID int, address helper.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", userID, addressID, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserRepositoryMockRecorder) UpdateAddress(userID, addressID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserRepository)(nil).UpdateAddress), userID, addressID, address)
}

// UpdatePassword mocks base method.
func (m *MockUserRepository) UpdatePassword(id int, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", id, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepositoryMockRecorder) UpdatePassword(id, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepository)(nil).UpdatePassword), id, newPassword)
}

// UserLogin mocks base method.
func (m *MockUserRepository) UserLogin(email string) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", email)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserRepositoryMockRecorder) UserLogin(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserRepository)(nil).UserLogin), email)
}

// UserSignUp mocks base method.
func (m *MockUserRepository) UserSignUp(user helper.UserReq) (response.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", user)
	ret0, _ := ret[0].(response.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockUserRepositoryMockRecorder) UserSignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockUserRepository)(nil).UserSignUp), user)
}

// ViewProfile mocks base method.
func (m *MockUserRepository) ViewProfile(userID int) (response.Userprofile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewProfile", userID)
	ret0, _ := ret[0].(response.Userprofile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewProfile indicates an expected call of ViewProfile.
func (mr *MockUserRepositoryMockRecorder) ViewProfile(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewProfile", reflect.TypeOf((*MockUserRepository)(nil).ViewProfile), userID)
}
